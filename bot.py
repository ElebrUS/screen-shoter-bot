import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils import exceptions
from aiogram.dispatcher.filters import Filter
import json
import config
from function import IsUrl, take_screen
from urllib.parse import urlparse

# Configure logging
logging.basicConfig(level=logging.ERROR)

# Initialize bot and dispatcher
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç `/start` –∫–æ–º–º–∞–Ω–¥—É
    """
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}"
                        f"\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞"
                        f"\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç")


@dp.message_handler(IsUrl())
async def all_message(message: types.Message):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç URL
    """
    try:
        await bot.send_chat_action(message.chat.id, 'typing')
        await message.reply('–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤—Ä–µ–º—è')
        photo = await take_screen(message.text, True)
        site_name = urlparse(message.text).netloc
        await bot.send_chat_action(message.chat.id, 'upload_document')
        await bot.send_document(
            message.chat.id,
            types.InputFile(photo, f'{site_name}.png'),
            caption='üñº –í–∞—à –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞',
        )
    except Exception as e:
        logging.error(e)
        await message.reply('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')


async def on_startup(dis):
    logging.info('–°—Ç–∞—Ä—Ç –±–æ—Ç–∞....')
    await bot.set_webhook(config.WEBHOOK_URL, drop_pending_updates=True)


def start_heroku():
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=config.WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        host=config.WEBAPP_HOST,
        port=config.WEBAPP_PORT,
    )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
